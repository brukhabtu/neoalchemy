name: Unit Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: neoalchemy-unit-tests:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run unit tests
      run: |
        echo "üß™ Running unit tests in Docker container..."
        docker run --rm neoalchemy-unit-tests:test

    - name: Run unit tests with timing
      run: |
        echo "‚è±Ô∏è  Running unit tests with performance timing..."
        docker run --rm neoalchemy-unit-tests:test uv run python -m pytest tests/unit/ --tb=short --durations=5

    - name: Verify test isolation
      run: |
        echo "üîí Verifying unit test isolation (no database required)..."
        # Verify that the container doesn't have Neo4j or database connections
        docker run --rm neoalchemy-unit-tests:test uv run python -c "
        import sys
        try:
            # This should work - testing our isolation fixtures
            from tests.unit.conftest import mock_driver, mock_repo
            print('‚úÖ Mock fixtures available')
            
            # This should be blocked - testing database fixture blocking
            from tests.unit.conftest import driver
            print('‚úÖ Database fixture blocking mechanism in place')
            
            print('‚úÖ Unit test isolation verified successfully')
        except Exception as e:
            print(f'‚ùå Isolation verification failed: {e}')
            sys.exit(1)
        "

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Output image details
      run: |
        echo "üê≥ Docker image built and pushed successfully!"
        echo "üì¶ Image tags:"
        echo "${{ steps.meta.outputs.tags }}" | sed 's/^/  - /'
        echo ""
        echo "üè∑Ô∏è  Image labels:"
        echo "${{ steps.meta.outputs.labels }}" | sed 's/^/  - /'