name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Step 1: Build and push Docker image
  build-image:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      image-tag: ${{ steps.image-tag.outputs.tag }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Determine image tag
      id: image-tag
      run: |
        if [[ "${{ github.ref_type }}" == "tag" ]]; then
          # For release tags (v1.0.0), use the tag name
          TAG="${{ github.ref_name }}"
        elif [[ "${{ github.ref_name }}" == "main" ]]; then
          # For main branch, use 'latest'
          TAG="latest"
        elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
          # For pull requests, use PR number
          TAG="pr-${{ github.event.number }}"
        else
          # For other branches, use branch name
          TAG="${{ github.ref_name }}"
        fi
        
        # Sanitize tag name (replace invalid characters)
        TAG=$(echo "$TAG" | sed 's/[^a-zA-Z0-9._-]/-/g')
        
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "📦 Image will be tagged as: ${TAG}"

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ steps.image-tag.outputs.tag }}
          type=sha,prefix={{branch}}-

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: .devcontainer/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: ${{ github.event_name == 'pull_request' && 'type=docker,dest=/tmp/image.tar' || 'type=registry' }}

    - name: Load image for PR testing
      if: github.event_name == 'pull_request'
      run: |
        docker load -i /tmp/image.tar
        echo "🐳 Docker image loaded for PR testing"

    - name: Display build summary
      run: |
        echo "🎉 Docker image build completed!"
        echo "📦 Image tag: ${{ steps.image-tag.outputs.tag }}"
        echo "🔗 Full image name: ${{ steps.meta.outputs.tags }}" | head -1
        echo "📄 Digest: ${{ steps.build.outputs.digest }}"

  # Step 2: Run tests in parallel using the built image
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: build-image
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Prepare Docker image
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "📥 Building image locally for PR testing..."
          docker build -f .devcontainer/Dockerfile -t test-image .
          IMAGE_NAME="test-image"
        else
          echo "📥 Pulling built image from registry..."
          IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-image.outputs.image-tag }}"
          docker pull "$IMAGE_NAME"
        fi
        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

    - name: Run unit tests
      run: |
        echo "🧪 Running unit tests in Docker container..."
        docker run --rm -v $(pwd):/workspace -w /workspace \
          ${{ env.IMAGE_NAME }} \
          python -m pytest tests/unit/ -v --tb=short

    # Note: Coverage disabled due to Docker permission issues with SQLite files
    # TODO: Re-enable coverage when container permissions are resolved

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-image
    
    services:
      neo4j:
        image: neo4j:4.4
        env:
          NEO4J_AUTH: neo4j/password
          NEO4J_ACCEPT_LICENSE_AGREEMENT: yes
        ports:
          - 7474:7474
          - 7687:7687
        options: >-
          --health-cmd "wget --no-verbose --tries=1 --spider http://localhost:7474 || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Prepare Docker image
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "📥 Building image locally for PR testing..."
          docker build -f .devcontainer/Dockerfile -t test-image .
          IMAGE_NAME="test-image"
        else
          echo "📥 Pulling built image from registry..."
          IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-image.outputs.image-tag }}"
          docker pull "$IMAGE_NAME"
        fi
        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

    - name: Wait for Neo4j
      run: |
        echo "🔄 Waiting for Neo4j to be ready..."
        timeout 60 bash -c 'until curl -f http://localhost:7474; do sleep 2; done'
        echo "✅ Neo4j is ready!"

    - name: Run integration tests
      env:
        NEO4J_URI: bolt://localhost:7687
        NEO4J_USER: neo4j
        NEO4J_PASSWORD: password
      run: |
        echo "🧪 Running integration tests in Docker container..."
        docker run --rm -v $(pwd):/workspace -w /workspace \
          --network host \
          -e NEO4J_URI=$NEO4J_URI \
          -e NEO4J_USER=$NEO4J_USER \
          -e NEO4J_PASSWORD=$NEO4J_PASSWORD \
          ${{ env.IMAGE_NAME }} \
          python -m pytest tests/integration/ -v --tb=short

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: build-image
    
    services:
      neo4j:
        image: neo4j:4.4
        env:
          NEO4J_AUTH: neo4j/password
          NEO4J_ACCEPT_LICENSE_AGREEMENT: yes
        ports:
          - 7474:7474
          - 7687:7687
        options: >-
          --health-cmd "wget --no-verbose --tries=1 --spider http://localhost:7474 || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Prepare Docker image
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "📥 Building image locally for PR testing..."
          docker build -f .devcontainer/Dockerfile -t test-image .
          IMAGE_NAME="test-image"
        else
          echo "📥 Pulling built image from registry..."
          IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-image.outputs.image-tag }}"
          docker pull "$IMAGE_NAME"
        fi
        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

    - name: Wait for Neo4j
      run: |
        echo "🔄 Waiting for Neo4j to be ready..."
        timeout 60 bash -c 'until curl -f http://localhost:7474; do sleep 2; done'
        echo "✅ Neo4j is ready!"

    - name: Run E2E tests
      env:
        NEO4J_URI: bolt://localhost:7687
        NEO4J_USER: neo4j
        NEO4J_PASSWORD: password
      run: |
        echo "🧪 Running E2E tests in Docker container..."
        docker run --rm -v $(pwd):/workspace -w /workspace \
          --network host \
          -e NEO4J_URI=$NEO4J_URI \
          -e NEO4J_USER=$NEO4J_USER \
          -e NEO4J_PASSWORD=$NEO4J_PASSWORD \
          ${{ env.IMAGE_NAME }} \
          python -m pytest tests/e2e/ -v --tb=short

  # Code quality checks (runs in parallel with tests)
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: build-image
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Prepare Docker image
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "📥 Building image locally for PR testing..."
          docker build -f .devcontainer/Dockerfile -t test-image .
          IMAGE_NAME="test-image"
        else
          echo "📥 Pulling built image from registry..."
          IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-image.outputs.image-tag }}"
          docker pull "$IMAGE_NAME"
        fi
        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

    - name: Run linting
      run: |
        echo "🔍 Running code linting in Docker container..."
        docker run --rm -v $(pwd):/workspace -w /workspace \
          ${{ env.IMAGE_NAME }} \
          ruff check neoalchemy/ --no-cache

    - name: Run type checking
      run: |
        echo "🔍 Running type checking in Docker container..."
        docker run --rm -v $(pwd):/workspace -w /workspace \
          ${{ env.IMAGE_NAME }} \
          mypy neoalchemy/ --ignore-missing-imports

    - name: Run code formatting check
      run: |
        echo "🔍 Checking code formatting in Docker container..."
        docker run --rm -v $(pwd):/workspace -w /workspace \
          ${{ env.IMAGE_NAME }} \
          ruff format --check neoalchemy/ --no-cache

  # Summary job
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [build-image, unit-tests, integration-tests, e2e-tests, code-quality]
    if: always()

    steps:
    - name: Check results
      run: |
        echo "📊 CI Pipeline Summary:"
        echo "======================"
        echo "Docker Build: ${{ needs.build-image.result }}"
        echo "Unit Tests: ${{ needs.unit-tests.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"
        echo "E2E Tests: ${{ needs.e2e-tests.result }}"
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo ""
        
        if [[ "${{ needs.build-image.result }}" == "success" && 
              "${{ needs.unit-tests.result }}" == "success" && 
              "${{ needs.integration-tests.result }}" == "success" && 
              "${{ needs.e2e-tests.result }}" == "success" && 
              "${{ needs.code-quality.result }}" == "success" ]]; then
          echo "✅ All checks passed! Ready to merge."
          echo "🐳 Docker image available at:"
          echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-image.outputs.image-tag }}"
        else
          echo "❌ Some checks failed. Please review the results above."
          exit 1
        fi